apiVersion: v1
kind: ServiceAccount
metadata:
  name: omsagent
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: omsagent-reader
rules:
- apiGroups: [""]
  resources: ["pods", "events", "nodes", "namespaces", "services"]
  verbs: ["list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: omsagentclusterrolebinding
subjects:
  - kind: ServiceAccount
    name: omsagent
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: omsagent-reader
  apiGroup: rbac.authorization.k8s.io
---
kind: ConfigMap
apiVersion: v1
data:
  kube.conf: "# Fluentd config file for OMS Docker - cluster components (kubeAPI)\n\n#Kubernetes
    pod inventory\n<source>\n\ttype kubepodinventory\n\ttag oms.containerinsights.KubePodInventory\n\trun_interval
    60s\n  log_level debug\n</source>\n\n#Kubernetes events\n<source>\n\ttype kubeevents\n\ttag
    oms.containerinsights.KubeEvents\n\trun_interval 60s\n  log_level debug\n</source>\n\n#Kubernetes
    logs\n<source>\n\ttype kubelogs\n\ttag oms.api.KubeLogs\n\trun_interval 60s\n</source>\n\n#Kubernetes
    services\n<source>\n\ttype kubeservices\n\ttag oms.containerinsights.KubeServices\n\trun_interval
    60s\n  log_level debug\n</source>\n\n#Kubernetes Nodes\n<source>\n\ttype kubenodeinventory\n\ttag
    oms.containerinsights.KubeNodeInventory\n\trun_interval 60s\n  log_level debug\n</source>\n\n#Kubernetes
    perf\n<source>\n\ttype kubeperf\n\ttag oms.api.KubePerf\n\trun_interval 60s\n
    \ log_level debug\n</source>\n\n<match oms.containerinsights.KubePodInventory**>\n
    \ type out_oms\n  log_level debug\n  num_threads 5\n  buffer_chunk_limit 20m\n
    \ buffer_type file\n  buffer_path %STATE_DIR_WS%/out_oms_kubepods*.buffer\n  buffer_queue_limit
    20\n  buffer_queue_full_action drop_oldest_chunk\n  flush_interval 20s\n  retry_limit
    10\n  retry_wait 30s\n  max_retry_wait 9m\n</match>\n\n<match oms.containerinsights.KubeEvents**>\n\ttype
    out_oms\n\tlog_level debug\n  num_threads 5\n\tbuffer_chunk_limit 5m\n\tbuffer_type
    file\n\tbuffer_path %STATE_DIR_WS%/out_oms_kubeevents*.buffer\n\tbuffer_queue_limit
    10\n  buffer_queue_full_action drop_oldest_chunk\n\tflush_interval 20s\n\tretry_limit
    10\n\tretry_wait 30s\n  max_retry_wait 9m\n</match>\n\n<match oms.api.KubeLogs**>\n\ttype
    out_oms_api\n\tlog_level debug\n  buffer_chunk_limit 10m\n\tbuffer_type file\n\tbuffer_path
    %STATE_DIR_WS%/out_oms_api_kubernetes_logs*.buffer\n\tbuffer_queue_limit 10\n\tflush_interval
    20s\n\tretry_limit 10\n\tretry_wait 30s\n</match>\n\n<match oms.containerinsights.KubeServices**>\t
    \ \n  type out_oms\n  log_level debug\n  num_threads 5\n  buffer_chunk_limit 20m\n
    \ buffer_type file\n  buffer_path %STATE_DIR_WS%/out_oms_kubeservices*.buffer\n
    \ buffer_queue_limit 20\n  buffer_queue_full_action drop_oldest_chunk\n  flush_interval
    20s\n  retry_limit 10\n  retry_wait 30s\n  max_retry_wait 9m\n</match>\n\n<match
    oms.containerinsights.KubeNodeInventory**>\n  type out_oms\n  log_level debug\n
    \ num_threads 5\n  buffer_chunk_limit 20m\n  buffer_type file\n  buffer_path %STATE_DIR_WS%/state/out_oms_kubenodes*.buffer\n
    \ buffer_queue_limit 20\n  buffer_queue_full_action drop_oldest_chunk\n  flush_interval
    20s\n  retry_limit 10\n  retry_wait 30s\n  max_retry_wait 9m\n</match>\n\n<match
    oms.api.ContainerNodeInventory**>\n  type out_oms_api\n  log_level debug\n  buffer_chunk_limit
    20m\n  buffer_type file\n  buffer_path %STATE_DIR_WS%/out_oms_containernodeinventory*.buffer\n
    \ buffer_queue_limit 20\n  flush_interval 20s\n  retry_limit 10\n  retry_wait
    15s\n  max_retry_wait 9m\n</match>\n\n<match oms.api.KubePerf**>\t\n  type out_oms\n
    \ log_level debug\n  num_threads 5\n  buffer_chunk_limit 20m\n  buffer_type file\n
    \ buffer_path %STATE_DIR_WS%/out_oms_kubeperf*.buffer\n  buffer_queue_limit 20\n
    \ buffer_queue_full_action drop_oldest_chunk\n  flush_interval 20s\n  retry_limit
    10\n  retry_wait 30s\n  max_retry_wait 9m\n</match>\n"
metadata:
  name: omsagent-rs-config
  namespace: kube-system
---
apiVersion: v1
kind: Secret
metadata:
 name: omsagent-secret
 namespace: kube-system
type: Opaque
data:
  #BASE64 ENCODED (Both WSID & KEY) INSIDE DOUBLE QUOTE ("")
  WSID: "WSID"
  KEY: "KEY"
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
 name: omsagent
 namespace: kube-system
spec:
 updateStrategy:
  type: RollingUpdate
 template:
  metadata:
   labels:
    dsName: "omsagent-ds"
   annotations:
    agentVersion: "1.8.1.256"
    dockerProviderVersion: "3.0.0-3"
  spec:
   serviceAccountName: omsagent
   containers:
     - name: omsagent 
       image: "microsoft/oms:ciprod11292018"
       imagePullPolicy: IfNotPresent
       resources:
        limits:
         cpu: 150m
         memory: 300Mi
        requests:
         cpu: 50m
         memory: 150Mi
       env:
      #  - name: AKS_RESOURCE_ID
      #    value: "VALUE_AKS_RESOURCE_ID_VALUE"
       #Uncomment below two lines for ACS clusters and set the cluster names manually. Also comment out the above two lines for ACS clusters
       - name: ACS_RESOURCE_NAME
         value: "my_acs_cluster_name"
       - name: DISABLE_KUBE_SYSTEM_LOG_COLLECTION
         value: "true"
       - name: CONTROLLER_TYPE
         value: "DaemonSet"
       - name: NODE_IP
         valueFrom:
            fieldRef:
              fieldPath: status.hostIP  
       securityContext:
         privileged: true
       ports:
       - containerPort: 25225
         protocol: TCP 
       - containerPort: 25224
         protocol: UDP
       volumeMounts:
        - mountPath: /var/run/host
          name: docker-sock
        - mountPath: /var/log 
          name: host-log
        - mountPath: /var/lib/docker/containers 
          name: containerlog-path
        - mountPath: /etc/omsagent-secret
          name: omsagent-secret
          readOnly: true
       livenessProbe:
        exec:
         command:
         - /bin/bash
         - -c
         - ps -ef | grep omsagent | grep -v "grep" && if [ "$(getfacl -p /var/run/host/docker.sock | grep -c "omsagent")" -eq 0 ]; then sudo setfacl -m user:omsagent:rw /var/run/host/docker.sock; fi
        initialDelaySeconds: 60
        periodSeconds: 60
   nodeSelector:
    beta.kubernetes.io/os: linux    
   # Tolerate a NoSchedule taint on master that ACS Engine sets.
   tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"     
   volumes:
    - name: docker-sock 
      hostPath:
       path: /var/run
    - name: container-hostname
      hostPath:
       path: /etc/hostname
    - name: host-log
      hostPath:
       path: /var/log
    - name: containerlog-path
      hostPath:
       path: /var/lib/docker/containers
    - name: omsagent-secret
      secret:
       secretName: omsagent-secret
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 name: omsagent-rs
 namespace: kube-system
spec:
 replicas: 1
 selector:
  matchLabels:
   rsName: "omsagent-rs"
 strategy:
  type: RollingUpdate
 template:
  metadata:
   labels:
    rsName: "omsagent-rs"
   annotations:
    agentVersion: "1.8.1.256"
    dockerProviderVersion: "3.0.0-3"
  spec:
   serviceAccountName: omsagent
   containers:
     - name: omsagent 
       image: "microsoft/oms:ciprod11292018"
       imagePullPolicy: IfNotPresent
       resources:
        limits:
         cpu: 150m
         memory: 500Mi
        requests:
         cpu: 50m
         memory: 100Mi
       env:
       #- name: AKS_RESOURCE_ID
       #  value: "VALUE_AKS_RESOURCE_ID_VALUE"
       #Uncomment below two lines for ACS clusters and set the cluster names manually. Also comment out the above two lines for ACS clusters
       - name: ACS_RESOURCE_NAME
         value: "my_acs_cluster_name"
       - name: DISABLE_KUBE_SYSTEM_LOG_COLLECTION
         value: "true"
       - name: CONTROLLER_TYPE
         value: "ReplicaSet"
       - name: NODE_IP
         valueFrom:
            fieldRef:
              fieldPath: status.hostIP  
       securityContext:
         privileged: true
       ports:
       - containerPort: 25225
         protocol: TCP 
       - containerPort: 25224
         protocol: UDP
       volumeMounts:
        - mountPath: /var/run/host
          name: docker-sock
        - mountPath: /var/log 
          name: host-log
        - mountPath: /var/lib/docker/containers 
          name: containerlog-path
        - mountPath: /etc/omsagent-secret
          name: omsagent-secret
          readOnly: true
        - mountPath : /etc/config
          name: omsagent-rs-config
       livenessProbe:
        exec:
         command:
         - /bin/bash
         - -c
         - ps -ef | grep omsagent | grep -v "grep"
        initialDelaySeconds: 60
        periodSeconds: 60
   nodeSelector:
    beta.kubernetes.io/os: linux
    kubernetes.io/role: agent
   volumes:
    - name: docker-sock 
      hostPath:
       path: /var/run
    - name: container-hostname
      hostPath:
       path: /etc/hostname
    - name: host-log
      hostPath:
       path: /var/log
    - name: containerlog-path
      hostPath:
       path: /var/lib/docker/containers
    - name: omsagent-secret
      secret:
       secretName: omsagent-secret
    - name: omsagent-rs-config
      configMap:
        name: omsagent-rs-config    

